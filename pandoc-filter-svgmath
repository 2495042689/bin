#! /usr/bin/env python3

"""
Pandoc filter to process embedded TeX math into SVG images
"""

import re
import os
import sys
import pickle
from tempfile import gettempdir
from os.path import join, isfile
from pandocfilters import toJSONFilter, attributes, Image, Str
from subprocess import Popen, check_output, PIPE, STDOUT

TEMP_DIR = os.getenv("SVGMATH_ASSETS_DIR", gettempdir())
NAME_TEMPLATE = "formula-{:03d}"
SVG_SCALING_FACTOR = 1.3
LATEX_TEMPLATE = r"""
\documentclass[preview]{standalone}
\usepackage{amsmath}
\begin{document}
% content
\end{document}
""".strip()
index = 1

def svgmath(key, value, fmt, meta):
    global index
    if key == "Math":
        [sub, txt] = value
        display = sub["t"] == "DisplayMath"
        name = NAME_TEMPLATE.format(index)
        data = join(TEMP_DIR, "{}.p".format(name))
        if isfile(data):
            with open(data, "rb") as f:
                img = pickle.load(f)
                if img["c"][1][0]["c"] == txt and display == ("display" in img["c"][0][1]):
                    index = index + 1
                    return img
        formula = "${}{}$".format(r"\displaystyle " if display else "", txt)
        proc = Popen(["latex", "-output-directory", TEMP_DIR, "-jobname", name],
                     stdin=PIPE, stdout=PIPE, universal_newlines=True)
        (stdout, _) = proc.communicate(input=LATEX_TEMPLATE.replace("% content", formula, 1))
        if proc.returncode != 0:
            print(stdout, file=sys.stderr)
            sys.exit(1)
        dvi = join(TEMP_DIR, "{}.dvi".format(name))
        svg = join(TEMP_DIR, "{}.svg".format(name))
        output = check_output(["dvisvgm", "-e", "-n", "-o", svg, "-c", str(SVG_SCALING_FACTOR), dvi],
                              universal_newlines=True, stderr=STDOUT)
        depth = float(re.sub(".*depth=([^a-z]+).*", r"\1", output, flags=re.DOTALL))
        attrs = {"classes": ["math"]}
        if not display:
            attrs["style"] = "vertical-align: -{}pt".format(depth)
        attrs["classes"].append("display" if display else "inline")
        index = index + 1
        img = Image(attributes(attrs), [Str(txt)], [svg, ""])
        with open(data, "wb") as f:
            pickle.dump(img, f)
        return img

if __name__ == "__main__":
   toJSONFilter(svgmath)
