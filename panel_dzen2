#! /bin/dash

font_family='sans-serif'
font_size=11
icons_font_family=$font_family
icons_font_size=$font_size

. panel_colors

adaptive_centering=0
screen_width=$(sres -W)
NORMIFS=$IFS
FIELDIFS=':'
PADDING='  '

while getopts 'af:s:F:S:' opt ; do
    case "$opt" in
        a)
            adaptive_centering=1
            ;;
        f)
            font_family=$OPTARG
            ;;
        s)
            font_size=$OPTARG
            ;;
        F)
            icons_font_family=$OPTARG
            ;;
        S)
            icons_font_size=$OPTARG
            ;;
    esac
done

shift $((OPTIND - 1))

while read -r line ; do
    case $line in
        C*)
            sys_clock="^fg($COLOR_STATUS_FG)^bg($COLOR_STATUS_BG)${PADDING}${line#?}${PADDING}^fg()^bg()"
            ;;
        B*)
            set - ${line#?}
            state=$1
            level=$2
            case $state in
                Charging)
                    icon_state=\;
                    ;;
                Discharging)
                    if [ $level -eq 0 ] ; then
                        icon_state=0
                    else
                        icon_state=${level%?}
                    fi
                    ;;
                Full|Unknown)
                    icon_state=\:
                    ;;
            esac
            sys_battery="^fg($COLOR_STATUS_FG)^bg($COLOR_STATUS_BG)${PADDING}^fn(${icons_font_family}:pixelsize=${icons_font_size})${icon_state}^fn()${PADDING}^fg()^bg()"
            ;;
        V*)
            set - ${line#?}
            state=$1
            level=$2
            case $state in
                off)
                    icon_state=A
                    ;;
                on)
                    if [ $level -eq 0 ] ; then
                        icon_state=A
                    elif [ $level -lt 50 ] ; then
                        icon_state=B
                    else
                        icon_state=C
                    fi
                    ;;
            esac
            sys_volume="^fg($COLOR_STATUS_FG)^bg($COLOR_STATUS_BG)${PADDING}^fn(${icons_font_family}:pixelsize=${icons_font_size})${icon_state}^fn()${PADDING}^fg()^bg()"
            ;;
        N*)
            essid=${line#?}
            if [ -n "$essid" ] ; then
                icon_state='E'
            else
                icon_state='D'
            fi
            sys_net="^fg($COLOR_STATUS_FG)^bg($COLOR_STATUS_BG)${PADDING}^fn(${icons_font_family}:pixelsize=${icons_font_size})${icon_state}^fn()${PADDING}^fg()^bg()"
            ;;
        T*)
            title="^fg($COLOR_TITLE_FG)^bg($COLOR_TITLE_BG)^ca(1, bspc toggle_floating)^ca(2, bspc toggle_locked)^ca(3, bspc close)${PADDING}${line#?}${PADDING}^ca()^ca()^ca()"
            ;;
        W*)
            wm_infos="$PADDING"
            IFS=$FIELDIFS
            set - ${line#?}
            while [ $# -gt 0 ] ; do
                item=$1
                case $item in
                    [DdEUu]*)
                        name=${item#?}
                        case $item in
                            u*)
                                FG=$COLOR_URGENT_FG
                                BG=$COLOR_URGENT_BG
                                ;;
                            [DU]*)
                                FG=$COLOR_ACTIVE_FG
                                BG=$COLOR_ACTIVE_BG
                                ;;
                            d*)
                                FG=$COLOR_INACTIVE_FG
                                BG=$COLOR_INACTIVE_BG
                                ;;
                            E*)
                                FG=$COLOR_EMPTY_FG
                                BG=$COLOR_EMPTY_BG
                                ;;
                        esac
                        wm_infos="${wm_infos}^fg(${FG})^bg(${BG})^ca(1, bspc use ${name})^ca(2, bspc send_to ${name})^ca(3, bspc send_to ${name} --follow)${PADDING}${name}${PADDING}^ca()^ca()^ca()"
                        ;;
                    L*)
                        # layout=$(printf "%s" "${item#?}" | sed 's/^\(.\).*/\U\1/')
                        layout=${item#?}
                        case $layout in
                            tiled)
                                icon_state=G
                                ;;
                            monocle)
                                icon_state=F
                                ;;
                        esac
                        wm_infos="${wm_infos}^fg()^bg()${PADDING}${PADDING}^fg($COLOR_LAYOUT_FG)^bg($COLOR_LAYOUT_BG)^ca(1, bspc cycle_layout)^ca(2, bspc balance)${PADDING}^fn(${icons_font_family}:pixelsize=${icons_font_size})${icon_state}^fn()${PADDING}^ca()^ca()"
                        ;;
                esac
                shift
            done
            IFS=$NORMIFS
            ;;
    esac
    sys_infos="${sys_battery}${sys_net}${sys_volume}${sys_clock}${PADDING}"
    set - $(printf '%s\0%s\0%s' "$wm_infos" "$title" "$sys_infos" | sed 's/\^fn()/\\)/g; s/\^fn([^)]\+)/\\(/g; s/\^[a-z]\+([^)]*)//g' | xargs -0 textwidth -f "$font_family" -s "$font_size" -F "$icons_font_family" -S "$icons_font_size")
    left_width=$1
    center_width=$2
    right_width=$3
    left_indent=0
    right_indent=$((screen_width - right_width))
    available_center=$((screen_width - (left_width + right_width)))
    if [ $available_center -lt $center_width ] ; then
        center_indent=$((left_indent + left_width))
    else
        if [ $adaptive_centering -eq 1 ] ; then
            center_indent=$((left_width + (available_center - center_width) / 2))
        else
            center_indent=$(( (screen_width - center_width) / 2 ))
        fi
    fi
    printf "%s\n" "^pa($center_indent)$title^pa($left_indent)$wm_infos^pa($right_indent)$sys_infos"
done
